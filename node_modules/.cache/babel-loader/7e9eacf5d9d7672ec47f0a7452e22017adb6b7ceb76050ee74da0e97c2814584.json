{"ast":null,"code":"var _jsxFileName = \"/Users/mamushmesfin/Documents - Melakneh\\u2019s MacBook Pro/CodingProjects/Codecademy Full-Stack Path/Off-Platform Projects/FRONT END/Appointment Planner/appointment_planner/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from '../../components/contactForm/ContactForm';\nimport { TileList } from '../../components/tileList/TileList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = props => {\n  _s();\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\n\n  // console.log(props)\n\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const [email, setEmail] = useState('');\n  const [duplicate, setDuplicate] = useState(false);\n  useEffect(() => {\n    const alreadyThere = props.contacts.findIndex(element => element.name === name);\n    if (alreadyThere !== -1) {\n      setDuplicate(true);\n      console.log({\n        done: 'done!'\n      });\n    } else {\n      setDuplicate(false);\n    }\n  }, [name]);\n  const handleSubmit = e => {\n    e.preventDefault();\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n    const newContact = {\n      name: name,\n      phone: phone,\n      email: email\n    };\n    if (duplicate === false && name !== '') {\n      console.log(newContact);\n      props.addContact(newContact);\n      setName('');\n      setPhone('');\n      setEmail('');\n    }\n    if (duplicate === true) {\n      window.alert('duplicate!');\n    }\n\n    //  setName('');\n    //  setPhone('');\n    //  setEmail('');\n  };\n\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        name: name,\n        setName: setName,\n        phone: phone,\n        setPhone: setPhone,\n        email: email,\n        setEmail: setEmail,\n        handleSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        contacts: props.contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"iaFSMGC3C0yUQZDbJNHjhnH0nb4=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","ContactsPage","props","name","setName","phone","setPhone","email","setEmail","duplicate","setDuplicate","alreadyThere","contacts","findIndex","element","console","log","done","handleSubmit","e","preventDefault","newContact","addContact","window","alert"],"sources":["/Users/mamushmesfin/Documents - Melaknehâ€™s MacBook Pro/CodingProjects/Codecademy Full-Stack Path/Off-Platform Projects/FRONT END/Appointment Planner/appointment_planner/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { ContactForm } from '../../components/contactForm/ContactForm'\r\nimport { TileList } from '../../components/tileList/TileList';\r\n\r\nexport const ContactsPage = (props) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n\r\n  // console.log(props)\r\n\r\n\r\n  const [ name, setName ] = useState('');\r\n  const [ phone, setPhone ] = useState('');\r\n  const [ email, setEmail ] = useState('');\r\n\r\n  const [ duplicate, setDuplicate ] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const alreadyThere = props.contacts.findIndex(element => element.name === name);\r\n    if(alreadyThere !== -1) {\r\n      setDuplicate(true)\r\n      console.log({done: 'done!'})\r\n    }else {\r\n      setDuplicate(false)\r\n    }\r\n  }, [name])\r\n\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n   const newContact = {\r\n    name: name,\r\n    phone: phone,\r\n    email: email\r\n   }\r\n\r\n   if(duplicate === false && name!=='') {\r\n    console.log(newContact)\r\n    props.addContact(newContact)\r\n    setName('');\r\n    setPhone('');\r\n    setEmail('');\r\n   }\r\n\r\n   if(duplicate === true) {\r\n    window.alert('duplicate!')\r\n   }\r\n\r\n  //  setName('');\r\n  //  setPhone('');\r\n  //  setEmail('');\r\n  };\r\n\r\n  \r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2>\r\n        <ContactForm\r\n        name={name}\r\n        setName={setName}\r\n        phone={phone}\r\n        setPhone={setPhone}\r\n        email={email}\r\n        setEmail={setEmail}\r\n        handleSubmit={handleSubmit}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList contacts={props.contacts}/>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,0CAA0C;AACtE,SAASC,QAAQ,QAAQ,oCAAoC;AAAC;AAE9D,OAAO,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAAA;EACrC;AACF;AACA;AACA;;EAEE;;EAGA,MAAM,CAAEC,IAAI,EAAEC,OAAO,CAAE,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAAEQ,KAAK,EAAEC,QAAQ,CAAE,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAAEU,KAAK,EAAEC,QAAQ,CAAE,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAM,CAAEY,SAAS,EAAEC,YAAY,CAAE,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACd,MAAMa,YAAY,GAAGT,KAAK,CAACU,QAAQ,CAACC,SAAS,CAACC,OAAO,IAAIA,OAAO,CAACX,IAAI,KAAKA,IAAI,CAAC;IAC/E,IAAGQ,YAAY,KAAK,CAAC,CAAC,EAAE;MACtBD,YAAY,CAAC,IAAI,CAAC;MAClBK,OAAO,CAACC,GAAG,CAAC;QAACC,IAAI,EAAE;MAAO,CAAC,CAAC;IAC9B,CAAC,MAAK;MACJP,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,CAACP,IAAI,CAAC,CAAC;EAGV,MAAMe,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,EAAE;IAClB;AACJ;AACA;AACA;IACG,MAAMC,UAAU,GAAG;MAClBlB,IAAI,EAAEA,IAAI;MACVE,KAAK,EAAEA,KAAK;MACZE,KAAK,EAAEA;IACR,CAAC;IAED,IAAGE,SAAS,KAAK,KAAK,IAAIN,IAAI,KAAG,EAAE,EAAE;MACpCY,OAAO,CAACC,GAAG,CAACK,UAAU,CAAC;MACvBnB,KAAK,CAACoB,UAAU,CAACD,UAAU,CAAC;MAC5BjB,OAAO,CAAC,EAAE,CAAC;MACXE,QAAQ,CAAC,EAAE,CAAC;MACZE,QAAQ,CAAC,EAAE,CAAC;IACb;IAEA,IAAGC,SAAS,KAAK,IAAI,EAAE;MACtBc,MAAM,CAACC,KAAK,CAAC,YAAY,CAAC;IAC3B;;IAED;IACA;IACA;EACA,CAAC;;EAID;AACF;AACA;AACA;;EAEE,oBACE;IAAA,wBACE;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAoB,eACpB,QAAC,WAAW;QACZ,IAAI,EAAErB,IAAK;QACX,OAAO,EAAEC,OAAQ;QACjB,KAAK,EAAEC,KAAM;QACb,QAAQ,EAAEC,QAAS;QACnB,KAAK,EAAEC,KAAM;QACb,QAAQ,EAAEC,QAAS;QACnB,YAAY,EAAEU;MAAa;QAAA;QAAA;QAAA;MAAA,QACzB;IAAA;MAAA;MAAA;MAAA;IAAA,QACM,eACV;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAiB,eACjB,QAAC,QAAQ;QAAC,QAAQ,EAAEhB,KAAK,CAACU;MAAS;QAAA;QAAA;QAAA;MAAA,QAAE;IAAA;MAAA;MAAA;MAAA;IAAA,QAC7B;EAAA;IAAA;IAAA;IAAA;EAAA,QACN;AAEV,CAAC;AAAC,GAnFWX,YAAY;AAAA,KAAZA,YAAY;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}